name: Release

on:
  push:
    tags:
      - "*.*.*"

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup SBT and GraalVM
        uses: olafurpg/setup-scala@v10
        with:
          java-version: graalvm-ce-java11@20.1.0
      - name: docker-compose up
        run: docker-compose -f ./daemon/src/main/resources/docker-compose.yml up -d
      - name: Run tests
        run: sbt 'clean; cli/test; core/test; daemon/test'
      - name: docker-compose down
        run: docker-compose -f ./daemon/src/main/resources/docker-compose.yml down

  publish-daemon-on-dockerhub:
    name: Publish pragmad on Docker Hub
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup SBT and GraalVM
        uses: olafurpg/setup-scala@v10
        with:
          java-version: graalvm-ce-java11@20.1.0
      - name: Publish to Docker Hub
        run: sbt 'clean; daemon/docker:publish'

  create-release:
    name: Create a release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Set release version as output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          release_name: v${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      pragma_version: ${{ steps.vars.outputs.tag }}

  upload-docker-compose-asset:
    name: Upload docker-compose.yml release asset
    needs:
      - test
      - create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cli/src/main/resources/docker-compose.yml
          asset_name: docker-compose.yml
          asset_content_type: text/yaml

  build-debian:
    name: Build and release for Debian
    needs:
      - create-release
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup SBT and GraalVM
        uses: olafurpg/setup-scala@v10
        with:
          java-version: graalvm-ce-java11@20.1.0
      - name: Build Debian Package
        run: sbt 'clean; cli/debian:packageBin'
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cli/target/pragma_${{ needs.create-release.outputs.pragma_version }}_all.deb
          asset_name: pragma_${{ needs.create-release.outputs.pragma_version }}.deb
          asset_content_type: application/octet-stream

  build-universal:
    name: Build and release universal build
    needs:
      - create-release
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup SBT
        uses: olafurpg/setup-scala@v10
        with:
          java-version: openjdk@1.14
      - name: Build Zip
        run: sbt 'clean; cli/universal:packageBin'
      - name: Upload Universal Zip
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cli/target/universal/pragma-${{ needs.create-release.outputs.pragma_version }}.zip
          asset_name: pragma-${{ needs.create-release.outputs.pragma_version }}-universal.zip
          asset_content_type: application/zip
      - name: Build Fat JAR
        run: sbt 'clean;cli/assembly' && tar -czvf ./cli/target/pragma.tar.gz ./cli/target/pragma-assembly-${{ needs.create-release.outputs.pragma_version }}.jar
      - name: Upload Fat JAR
        id: upload-fat-jar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cli/target/pragma.tar.gz
          asset_name: pragma.jar.tar.gz
          asset_content_type: application/java-archive

  build-windows:
    name: Build and release for Windows
    needs:
      - create-release
      - test
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup SBT
        uses: olafurpg/setup-scala@v10
        with:
          java-version: openjdk@1.14
      - name: Install WIX
        run: |
          cd $HOME;
          mkdir wix;
          cd .\wix;
          Invoke-WebRequest -Uri https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip -OutFile .\wix.zip;
          tar -xf .\wix.zip;
          $env:Path += ";$HOME\wix";
          cd $env:GITHUB_WORKSPACE;
        shell: pwsh
      - name: Build MSI
        run: sbt 'clean; cli/windows:packageBin'
        shell: bash
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: .\cli\target\windows\pragma.msi
          asset_name: pragma-${{ needs.create-release.outputs.pragma_version }}.msi
          asset_content_type: application/octet-stream
